/*
Validate if a given string can be interpreted as a decimal number.

Some examples:
"0" => true
" 0.1 " => true
"abc" => false
"1 a" => false
"2e10" => true
" -90e3   " => true
" 1e" => false
"e3" => false
" 6e-1" => true
" 99e2.5 " => false
"53.5e93" => true
" --6 " => false
"-+3" => false
"95a54e53" => false

Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one. However, here is a list of characters that can be in a valid decimal number:

Numbers 0-9
Exponent - "e"
Positive/negative sign - "+"/"-"
Decimal point - "."
Of course, the context of these characters also matters in the input.

Update (2015-02-10):
The signature of the C++ function had been updated. If you still see your function signature accepts a const char * argument, please click the reload button to reset your code definition.
*/

public class Solution {
 public bool IsNumber(string str) {
  int dotcount = 0;
  str = str.Trim();
  bool sign = str.StartsWith('-');

  if (str.Length <= 0) {
   return false;
  }
  string s2 = "";

  string s3 = "";
  int count = 0;

  char[] numerical = ".0123456789".ToCharArray();
  char[] numerical1 = "-+0123456789".ToCharArray();
  int i = 0;
  if (str[0] == '-' || str[0] == '+') {
   i = 1;
  }

  for (; i < str.Length; i++) {

   if (numerical.Contains(str[i]) && count == 0) {
    if (str[i] == '.') {
     dotcount++;
    }
    if (dotcount > 1) {
     return false;
    }
    s2 += str[i].ToString();
   } else if (str[i] == 'e' && count == 0)

   {

    if (s2.Length > 0 && count == 0) {
     if (str[i - 1] == '.' && s2.Length == 1) {
      return false;
     }
     count = 1;
    } else {
     return false;
    }
   } else if (numerical1.Contains(str[i]) && count == 1) {

    if (s3.Length > 1) {
     if (str[i] == '-' || str[i] == '+') {
      return false;
     }
    }
    s3 += str[i].ToString();
   } else {
    Console.Write("s");
    return false;
   }


  }
  if (s2.Length <= 0) {
   return false;
  }
  // Console.Write(s3);

  s3 = s3.TrimStart('-');
  s3 = s3.TrimStart('+');

  long num1;
  bool success1 = Int64.TryParse(s3, out num1);
  Console.WriteLine(num1);
  /*   if( success1){
         return true;
     }*/
  Double num;
  bool success = Double.TryParse(s2, out num);
  if (s3.Length > 0 && s2.Length > 0) {
   if (success1) {
    return true;
   }
   return false;
  } else if (success && count == 0) {

   return true;
  } else {

   return false;
  }
 }
}
