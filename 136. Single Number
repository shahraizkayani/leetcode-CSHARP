/*
Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4


*/
public class Solution {
    public int SingleNumber(int[] nums) {
      
        int number=0;
        Stack<int> hs=new Stack<int>();
        Stack<int> hs1=new Stack<int>();
        for(int i=0;i<nums.Length;i++){
            if(!(hs.Contains(nums[i]))){
            hs.Push(nums[i]);}
            
        
        else{
             hs1.Push(nums[i]);
        }
        }
                 for(int i=0;i<nums.Length;i++){
                     if(!(hs1.Contains(nums[i]))){
                         number=nums[i];
                     }}
        return number;
    }
}
