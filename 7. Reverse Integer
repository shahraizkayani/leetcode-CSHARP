/*
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
*/
using System.Globalization;

public class Solution {
    public int Reverse(int x) {
        string s= x.ToString();
        Stack<char> s1=new Stack<char>();
        string s2="";
        foreach(char ch in s){
            if(ch=='-'){}else{
            s1.Push(ch);}
        }
        foreach(char ch in s1.ToArray()){
           s2+=s1.Pop();
        }
        
         int num1;
        bool success= Int32.TryParse(s2, out num1);
        if(success){
       return x>0?num1:num1*-1;}
        else {
            return 0;
        }
    
}}
