/*
Given a binary tree, return the postorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [3,2,1]
Follow up: Recursive solution is trivial, could you do it iteratively



*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<int> PostorderTraversal(TreeNode root) {
        
        List<int> list = new List<int>();
        
        if (root == null)
            return list;
        Stack<int> ans = new Stack<int>();
        
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.Push(root);
        
        while(stack.Count > 0)
        {
            
            TreeNode curr = stack.Pop();
            ans.Push(curr.val);
            
            if (curr.left != null)
                stack.Push(curr.left);
            
               
            if (curr.right != null)
                stack.Push(curr.right);
        }
        
        while(ans.Count > 0){
            
            list.Add(ans.Pop());
        }
        return list;
    }
}
