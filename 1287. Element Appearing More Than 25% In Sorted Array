/*
Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time.

Return that integer.

 

Example 1:

Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6
 

Constraints:

1 <= arr.length <= 10^4
0 <= arr[i] <= 10^5



*/
public class Solution {
    public int FindSpecialInteger(int[] arr) {
        int length =(int) Math.Floor(arr.Length/4.0);
    Dictionary <int,int> delete = new Dictionary < int,int>();
 
  int number = 0;
  foreach ( int i in arr)
  {
  
      if ( delete.ContainsKey(i))
      {
      delete[i]++;
      }
      else 
      {
      delete. Add(i, 1);
      }
  
  
  }
          foreach ( KeyValuePair <int,int> k in delete)
       
       {
         
       if( k.Value > length){
       number = k.Key;
       }
       
       }
        return number;
    }
}
