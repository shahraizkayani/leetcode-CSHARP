/*
Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?


*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<int> InorderTraversal(TreeNode root) {
                List<int> list = new List<int>();
        if (root == null){
            return list;
        }
        Stack<TreeNode> st = new Stack<TreeNode>();
        
          TreeNode curr = root;
        while(st.Count > 0 || curr != null){
           
          
             
          if (curr != null)
          {
               st.Push(curr);
                curr = curr.left; 
          }
            else {
                
                curr = st.Pop();
                list.Add(curr.val);
                curr =curr.right;
            }
            
        }
        return list;
    }
}
