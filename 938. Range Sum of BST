//Conversion of https://www.youtube.com/watch?v=SIdrJwWp3H0
/*
Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.

 

Example 1:

Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32
Example 2:

Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
Output: 23


*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int RangeSumBST(TreeNode root, int L, int R) {
        int sum = 0;
        if ( root == null){
            return sum;
        }
        Queue <TreeNode> node = new Queue<TreeNode>();
        node.Enqueue(root);
        while(node.Count > 0){
            TreeNode current = node.Dequeue();
             Console.WriteLine(current.val);
            if(current.val >= L && current.val <=R){
               
                sum += current.val;}
            if(current.left != null && current.val >L)
                 node.Enqueue(current.left);
            if(current.right !=null && current.val <R)
                node.Enqueue(current.right);
        }
        return sum;
       
    }
}
