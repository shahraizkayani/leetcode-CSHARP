/*
Given two binary strings a and b, return their sum as a binary string.

 

Example 1:

Input: a = "11", b = "1"
Output: "100"
Example 2:

Input: a = "1010", b = "1011"
Output: "10101"
 

Constraints:

1 <= a.length, b.length <= 104
a and b consist only of '0' or '1' characters.
Each string does not contain leading zeros except for the zero itself.








*/
public class Solution {
    public string AddBinary(string a, string b) {
        StringBuilder sb = new StringBuilder();
            if (a.Length > b.Length)
            {
                b = b.PadLeft(a.Length, '0');
            }
            else if (b.Length > a.Length)
            {
                a = a.PadLeft(b.Length, '0');
            }
            char carry = '0';
            for (int i = a.Length - 1; i >= 0; i--)
            {
                int ch = a[i] + b[i] + carry - 144;
                carry = ch == 1 || ch == 0 ? '0' : '1';
                ch = ch % 2 == 0 ? 0 : 1;

                //Console.WriteLine(ch);
                sb.Append($"{ch}");

            }
            if (carry != '0') sb.Append($"{carry}");
            return sb.ToString().Count(x => x == '1') == 0 ? "0" : string.Concat(Reverse(sb.ToString()));
    }
                                                                                          public static string Reverse(string v)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            for (int i = v.Length - 1; i >= 0; i--)
            {
                stringBuilder.Append($"{v[i]}");
            }
            return stringBuilder.ToString();
        }
}
