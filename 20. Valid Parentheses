/*

Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:

Input: "()"
Output: true
Example 2:

Input: "()[]{}"
Output: true
Example 3:

Input: "(]"
Output: false
Example 4:

Input: "([)]"
Output: false
Example 5:

Input: "{[]}"
Output: true
*/
public class Solution {
 public bool IsValid(string s) {
  Stack < char > paren = new Stack < char > ();
  foreach(char ch in s) {
   if (ch == '(' || ch == '[' || ch == '{') {
    paren.Push(ch);
   } else if (ch == ')' && paren.Count() > 0 && paren.Peek() == '(') {
    paren.Pop();
   } else if (ch == ']' && paren.Count() > 0 && paren.Peek() == '[') {
    paren.Pop();
   } else if (ch == '}' && paren.Count() > 0 && paren.Peek() == '{') {
    paren.Pop();
   } else {
    return false;
   }
  }
  return paren.Count() == 0;
 }
}
