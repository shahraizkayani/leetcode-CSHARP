/*
Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.

Note:

Your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution and you may not use the same element twice.
Example:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.





*/
public class Solution {
	public int[] TwoSum(int[] numbers, int target) {
		HashSet < int > hash = new HashSet < int > ();
		foreach(int i in numbers) {
			hash.Add(i);
		}
		int[] arr1 = hash.ToArray();
		List < int > li = new List < int > ();
		int count = 0;
		int count1 = 0;
		int count2 = 0;
		int number1 = 0;
		int number2 = 0;
		int index = 0;
		int index1 = 0;
		for (int i = 0; i < arr1.Length; i++) {
			if (count > 0) {
				break;
			}
			for (int j = i; j < arr1.Length; j++) {
				if (count > 0) {
					break;
				}
				/* else if(numbers[i]==numbers[j]){
				     continue;
				 }*/
				else if (arr1[i] + arr1[j] == target) {
					number1 = arr1[i];
					number2 = arr1[j];
					count++;
				}
				count1++;
			}
			count2++;
		}
		Console.WriteLine("{0}\n {1}", count1, count2);
		index = Array.IndexOf(numbers, number1);
		index1 = Array.IndexOf(numbers, number2);
		if (index1 == index) {
			index1++;
		}

		li.Add(index + 1);
		li.Add(index1 + 1);
		return li.ToArray();
	}
}
