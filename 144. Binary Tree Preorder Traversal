/*
Given a binary tree, return the preorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,2,3]
Follow up: Recursive solution is trivial, could you do it iteratively?

*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<int> PreorderTraversal(TreeNode root) {
        
        
        List<int> list = new List<int>();
        if (root == null){
            return list;
        }
        Stack<TreeNode> st = new Stack<TreeNode>();
        st.Push(root);
        
        while(st.Count > 0){
           
            TreeNode curr = st.Pop();
             list.Add(curr.val);
           /*Console.Write(curr.val);*/
            if (curr.right != null)
                st.Push(curr.right);
            
             if (curr.left != null)
                st.Push(curr.left);
            
            
        }
        return list;
    }
}
