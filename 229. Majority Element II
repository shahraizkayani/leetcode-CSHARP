/*
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Note: The algorithm should run in linear time and in O(1) space.

Example 1:

Input: [3,2,3]
Output: [3]
Example 2:

Input: [1,1,1,3,3,2,2,2]
Output: [1,2]







*/
public class Solution {
    public IList<int> MajorityElement(int[] nums) {
        var list = new List<int>();
        if ( nums.Length == 1){
            list.Add(nums[0]);
            return list;
        }
        var hash =  new HashSet<int>();
        
           double length =(nums.Length/3.0) ;
       
        var dictionary = new Dictionary <int,int>();
        foreach (int i in nums) {
            
          
            if(dictionary.ContainsKey(i)){
                 
                dictionary[i]++;
           
                 if(dictionary[i] > length) {
               hash.Add(i);
            }
            }
            else{
                dictionary.Add(i,1);
                 if(dictionary[i] > length) {
               hash.Add(i);
            }
            }
            
        }
        foreach(int i in hash)
            list.Add(i);
        return list;
    }
}
